// generate-content.js - Script for generating various types of content
const axios = require('axios');
const fs = require('fs');
const path = require('path');

async function main() {
  try {
    const command = process.argv[2] || '';
    const details = process.argv[3] || '';
    const issueNumber = process.argv[4] || '';
    
    console.log(`Generating content based on: ${command}`);
    
    // Analyze what kind of content to generate
    const contentInfo = analyzeContentRequest(command + ' ' + details);
    
    // Generate the content
    const content = await generateContent(contentInfo);
    
    // Create a file with the generated content
    const fileName = `${contentInfo.type}-${Date.now()}.${getFileExtension(contentInfo.type)}`;
    const filePath = path.join('content', fileName);
    
    // Ensure the content directory exists
    if (!fs.existsSync('content')) {
      fs.mkdirSync('content', { recursive: true });
    }
    
    fs.writeFileSync(filePath, content);
    
    // Write the response to the standard response file
    fs.writeFileSync('response.md', `## Content Generated: ${contentInfo.title}

I've generated the ${contentInfo.type} content you requested. You can find it here: [${fileName}](${filePath})

### Content Type: ${contentInfo.type.charAt(0).toUpperCase() + contentInfo.type.slice(1)}

${getContentPreview(content, contentInfo.type)}

---
*Generated by Butler AI Assistant on ${new Date().toLocaleDateString()}*`);
    
    // Signal that we should commit changes
    fs.writeFileSync('commit_changes', 'true');
    
    console.log('Content generated successfully');
  } catch (error) {
    console.error('Error generating content:', error);
    fs.writeFileSync('response.md', `## Butler AI Assistant Error

I apologize, but I encountered an error generating your content:

\`\`\`
${error.message}
\`\`\``);
  }
}

function analyzeContentRequest(text) {
  // Default content type is 'document'
  let type = 'document';
  let title = 'Untitled';
  
  // Try to extract content type
  const typePatterns = [
    { pattern: /\b(report|document|doc)\b/i, type: 'document' },
    { pattern: /\b(email|mail|message)\b/i, type: 'email' },
    { pattern: /\b(blog|post|article)\b/i, type: 'blog' },
    { pattern: /\b(code|script|program)\b/i, type: 'code' },
    { pattern: /\b(presentation|slides|deck)\b/i, type: 'presentation' }
  ];
  
  for (const pattern of typePatterns) {
    if (pattern.pattern.test(text)) {
      type = pattern.type;
      break;
    }
  }
  
  // Try to extract title
  const titlePatterns = [
    // "Generate a [type] about/on/regarding [title]"
    new RegExp(`\\b(?:generate|create|write)\\s+a(?:n)?\\s+(?:${type}|content)\\s+(?:about|on|regarding|titled|named|called)\\s+["']?([^"']+?)["']?(?:\\s+|$)`, 'i'),
    // "Generate a [title] [type]"
    new RegExp(`\\b(?:generate|create|write)\\s+a(?:n)?\\s+["']?([^"']+?)["']?\\s+${type}\\b`, 'i'),
    // Just look for anything in quotes
    /["']([^"']+)["']/
  ];
  
  for (const pattern of titlePatterns) {
    const match = text.match(pattern);
    if (match && match[1]) {
      title = match[1].trim();
      break;
    }
  }
  
  return {
    type,
    title,
    text
  };
}

async function generateContent(contentInfo) {
  // Try OpenAI first, fall back to Anthropic if needed
  try {
    return await generateContentWithOpenAI(contentInfo);
  } catch (error) {
    console.error('Error with OpenAI, falling back to Anthropic:', error.message);
    return await generateContentWithAnthropic(contentInfo);
  }
}

async function generateContentWithOpenAI(contentInfo) {
  const apiKey = process.env.OPENAI_API_KEY;
  if (!apiKey) {
    throw new Error('OpenAI API key is not configured');
  }
  
  const promptsByType = {
    document: `Create a professional document titled "${contentInfo.title}". Use proper formatting with headings, subheadings, and structured content. Make it informative and well-organized.`,
    email: `Write a professional email about "${contentInfo.title}". Include a proper greeting, clear and concise body, and appropriate sign-off.`,
    blog: `Write an engaging blog post titled "${contentInfo.title}". Make it informative, interesting, and appropriate for online readers with a good structure including an introduction, main points, and conclusion.`,
    code: `Write clean, well-documented code for "${contentInfo.title}". Include comments explaining the logic and proper function/class organization.`,
    presentation: `Create presentation content for "${contentInfo.title}". Structure it with a title slide, agenda, main content slides, and a conclusion slide. Use bullet points where appropriate.`
  };
  
  const prompt = promptsByType[contentInfo.type] || `Create content about "${contentInfo.title}".`;
  
  const response = await axios.post(
    'https://api.openai.com/v1/chat/completions',
    {
      model: 'gpt-4-turbo-preview',
      messages: [
        {
          role: 'system',
          content: `You are Butler, a sophisticated AI assistant that creates high-quality content.
                   You speak formally and professionally, like a British butler.
                   You're creating a ${contentInfo.type} about "${contentInfo.title}".
                   Provide only the content itself, without any explanations or meta-commentary.
                   Use proper formatting appropriate for the content type.`
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      temperature: 0.7,
      max_tokens: 2000
    },
    {
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`
      }
    }
  );
  
  return response.data.choices[0].message.content;
}

async function generateContentWithAnthropic(contentInfo) {
  const apiKey = process.env.ANTHROPIC_API_KEY;
  if (!apiKey) {
    throw new Error('Anthropic API key is not configured');
  }
  
  const promptsByType = {
    document: `Create a professional document titled "${contentInfo.title}". Use proper formatting with headings, subheadings, and structured content. Make it informative and well-organized.`,
    email: `Write a professional email about "${contentInfo.title}". Include a proper greeting, clear and concise body, and appropriate sign-off.`,
    blog: `Write an engaging blog post titled "${contentInfo.title}". Make it informative, interesting, and appropriate for online readers with a good structure including an introduction, main points, and conclusion.`,
    code: `Write clean, well-documented code for "${contentInfo.title}". Include comments explaining the logic and proper function/class organization.`,
    presentation: `Create presentation content for "${contentInfo.title}". Structure it with a title slide, agenda, main content slides, and a conclusion slide. Use bullet points where appropriate.`
  };
  
  const prompt = promptsByType[contentInfo.type] || `Create content about "${contentInfo.title}".`;
  
  const response = await axios.post(
    'https://api.anthropic.com/v1/messages',
    {
      model: 'claude-3-haiku-20240307',
      max_tokens: 2000,
      system: `You are Butler, a sophisticated AI assistant that creates high-quality content.
              You speak formally and professionally, like a British butler.
              You're creating a ${contentInfo.type} about "${contentInfo.title}".
              Provide only the content itself, without any explanations or meta-commentary.
              Use proper formatting appropriate for the content type.`,
      messages: [
        {
          role: 'user',
          content: prompt
        }
      ]
    },
    {
      headers: {
        'Content-Type': 'application/json',
        'X-API-Key': apiKey,
        'anthropic-version': '2023-06-01'
      }
    }
  );
  
  return response.data.content[0].text;
}

function getFileExtension(contentType) {
  const extensionsByType = {
    document: 'md',
    email: 'md',
    blog: 'md',
    code: 'js',  // Default to js, could be improved to detect language
    presentation: 'md'
  };
  
  return extensionsByType[contentType] || 'md';
}

function getContentPreview(content, contentType) {
  // For code, show it in a code block
  if (contentType === 'code') {
    const previewLines = content.split('\n').slice(0, 15).join('\n');
    return `\`\`\`javascript
${previewLines}${content.split('\n').length > 15 ? '\n// ...' : ''}
\`\`\``;
  }
  
  // For other content, show a preview with proper formatting
  const preview = content.substring(0, 500);
  return preview + (content.length > 500 ? '...' : '');
}

main();
